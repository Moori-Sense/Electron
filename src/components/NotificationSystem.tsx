import React, { useEffect, useState } from "react";
import { AlertThresholds, Notification } from "../types/notification";
import "./NotificationSystem.css";


const NotificationSystem: React.FC = () => {

    const [currentAlert, setCurrentAlert] = useState<Notification | null>(null);
    const [topNotifications, setTopNotifications] = useState<Notification[]>([]);

    const [thresholds] = useState<AlertThresholds>({
        caution: 20,
        danger: 50
    });
    
    // Ïã§ÏãúÍ∞Ñ ÏïåÎ¶º Í∞êÏßÄ Î∞è ÏÉùÏÑ±
    useEffect(() => {
        const checkTensionAlerts = async () => {
            // ÏµúÏã† Ïû•Î†• Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            const latestTensions = await window.api.getLatestTensions();

            // Î™®Îì† ÎùºÏù∏ÏùÑ ÌôïÏù∏ÌïòÏó¨ ÏûÑÍ≥ÑÍ∞í Ï¥àÍ≥ºÌïòÎäî Ï≤´ Î≤àÏß∏ ÎùºÏù∏ Ï∞æÍ∏∞
            let alertLine = null;
            let alertType: 'caution' | 'danger' | null = null;
            let title = '';
            let message = '';

            for (const tensionData of latestTensions) {
                const {lineId, tension} = tensionData;

                if(tension >= thresholds.danger){
                    alertLine = tensionData;
                    alertType = 'danger';
                    title = `üö® ÏúÑÌóò ÏïåÎ¶º - Line ${lineId}`;
                    message = `Ïû•Î†•Ïù¥ ${tension.toFixed(1)}kNÏúºÎ°ú ÏúÑÌóò ÏàòÏ§ÄÏóê ÎèÑÎã¨ÌñàÏäµÎãàÎã§!`;
                    break; // ÏúÑÌóò ÏàòÏ§ÄÏù¥ Í∞ÄÏû• Ïö∞ÏÑ†ÏàúÏúÑ
                }else if(tension >= thresholds.caution){
                    alertLine = tensionData;
                    alertType = 'caution';
                    title = `‚ö†Ô∏è Ï£ºÏùò ÏïåÎ¶º - Line ${lineId}`;
                    message = `Ïû•Î†•Ïù¥ ${tension.toFixed(1)}kNÏúºÎ°ú Ï£ºÏùò ÏàòÏ§ÄÏóê ÎèÑÎã¨ÌñàÏäµÎãàÎã§.`;
                    // cautionÏùÄ Í≥ÑÏÜç ÌôïÏù∏ÌïòÏó¨ dangerÍ∞Ä ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨
                }
            }

            // ÏûÑÍ≥ÑÍ∞íÏùÑ Ï¥àÍ≥ºÌïú ÎùºÏù∏Ïù¥ ÏûàÏùÑ Îïå ÏïåÎ¶º ÏÉùÏÑ±
            if(alertLine && alertType){
                const newNotification: Notification = {
                    id: `${alertLine.lineId}-${Date.now()}`,
                    lineId: alertLine.lineId,
                    type: alertType,
                    title,
                    message,
                    timestamp: new Date().toISOString(),
                    isRead: false,
                    isActive: true,
                };

                // Ï§ëÏïô ÌåùÏóÖÏù¥ ÏóÜÏùÑ ÎïåÎßå Ï§ëÏïô ÌåùÏóÖ ÌëúÏãú
                if(!currentAlert){
                    setCurrentAlert(newNotification);
                    
                    // 5Ï¥à ÌõÑ Ï§ëÏïô ÌåùÏóÖ Ï†úÍ±∞ÌïòÍ≥† ÏÉÅÎã® ÏïåÎ¶ºÏúºÎ°ú Ïù¥Îèô
                    setTimeout(() => {
                        setCurrentAlert(null);
                        setTopNotifications(prev => [newNotification, ...prev.slice(0, 4)]); // ÏµúÎåÄ 5Í∞ú Ïú†ÏßÄ
                    }, 2000);
                } else {
                    // Ïù¥ÎØ∏ Ï§ëÏïô ÌåùÏóÖÏù¥ ÏûàÏúºÎ©¥ Î∞îÎ°ú ÏÉÅÎã® ÏïåÎ¶ºÏúºÎ°ú Ï∂îÍ∞Ä
                    setTopNotifications(prev => [newNotification, ...prev.slice(0, 4)]);
                }
            }
        };

        // 5Ï¥àÎßàÎã§ Ïû•Î†• Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        const interval = setInterval(checkTensionAlerts, 2000);

        // Ï¥àÍ∏∞ Ïã§Ìñâ
        checkTensionAlerts();

        return () => clearInterval(interval);
    }, [thresholds]);

    // ÏÉÅÎã® ÏïåÎ¶º Ï†úÍ±∞ Ìï®Ïàò
    const removeTopNotification = (notificationId: string) => {
        setTopNotifications(prev => prev.filter(notif => notif.id !== notificationId));
    };


    return (
        <>
            {/* ÏÉÅÎã® ÏïåÎ¶ºÎì§ */}
            {topNotifications.length > 0 && (
                <div className="top-notifications">
                    {topNotifications.map(notification => (
                        <div 
                            key={notification.id} 
                            className={`top-notification ${notification.type}`}
                        >
                            <div className="notification-icon">
                                {notification.type === 'danger' ? 'üö®' : '‚ö†Ô∏è'}
                            </div>
                            <div className="notification-content">
                                <div className="notification-title">{notification.title}</div>
                                <div className="notification-message">{notification.message}</div>
                            </div>
                            <button 
                                className="close-button"
                                onClick={() => removeTopNotification(notification.id)}
                            >
                                ‚úï
                            </button>
                        </div>
                    ))}
                </div>
            )}

            {/* Ï§ëÏïô ÏïåÎ¶º ÌåùÏóÖ */}
            {currentAlert && (
                <div className="alert-popup">
                    <div className={`alert-content ${currentAlert.type}`}>
                        <div className="alert-header">
                            <h3>{currentAlert.title}</h3>
                            <button 
                                className="close-button"
                                onClick={() => setCurrentAlert(null)}
                            >
                                ‚úï
                            </button>
                        </div>
                        <div className="alert-message">
                            {currentAlert.message}
                        </div>
                        <div className="alert-time">
                            {new Date(currentAlert.timestamp).toLocaleString()}
                        </div>
                    </div>
                </div>
            )}
        </>
    );
};
export default NotificationSystem;

